[
    {
        "id": "1511cab232daa7c5",
        "type": "tab",
        "label": "Sensor Monitoring Node",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1f3381b7ec8c93c4",
        "type": "tab",
        "label": "automode",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "84c549d1e2d30361",
        "type": "tab",
        "label": "logging",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "67e1ea71ee09ad87",
        "type": "tab",
        "label": "Data Manager",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6ec95de2e0350d99",
        "type": "tab",
        "label": "WIFI Management",
        "disabled": false,
        "info": ""
    },
    {
        "id": "907bbe60.b555f",
        "type": "ui_tab",
        "name": "Wifi",
        "icon": "wifi",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "530291d7ac16b8b6",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "43bed77cdbde6682",
        "type": "ui_group",
        "name": "Auto Time Set",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "feadece6be3103a2",
        "type": "ui_group",
        "name": "Configurations",
        "tab": "",
        "order": 3,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "bfd5905b7bc1997f",
        "type": "ui_group",
        "name": "Sensor Readings",
        "tab": "",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bcfd629a51e035bc",
        "type": "ui_group",
        "name": "Manual time-set",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "102d980614be1665",
        "type": "ui_group",
        "name": "Configure Network",
        "tab": "907bbe60.b555f",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cf2db1f0d54fcfea",
        "type": "ui_group",
        "name": "Access Point",
        "tab": "907bbe60.b555f",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b139ee09158667bc",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "71ab2643ddde15fa",
        "type": "ui_tab",
        "name": "Sensor Monitor",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "fecde59cd7368a46",
        "type": "ui_group",
        "name": "K30 Sensor",
        "tab": "71ab2643ddde15fa",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7bb5db2a6fd16341",
        "type": "ui_group",
        "name": "BME680",
        "tab": "71ab2643ddde15fa",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5ab9c7a919d4e89d",
        "type": "ui_group",
        "name": "Relay Valve",
        "tab": "71ab2643ddde15fa",
        "order": 3,
        "disp": true,
        "width": 10,
        "collapse": false,
        "className": ""
    },
    {
        "id": "160e81fb.f1c86e",
        "type": "ui_group",
        "name": "File Browser",
        "tab": "b63d1f91.68095",
        "order": 1,
        "disp": true,
        "width": "18",
        "collapse": false
    },
    {
        "id": "b63d1f91.68095",
        "type": "ui_tab",
        "name": "Files",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "86c33c0260dcb520",
        "type": "ui_group",
        "name": "Data Logger",
        "tab": "71ab2643ddde15fa",
        "order": 5,
        "disp": true,
        "width": 10,
        "collapse": false,
        "className": ""
    },
    {
        "id": "197509112fb46fb6",
        "type": "mqtt in",
        "z": "1511cab232daa7c5",
        "name": "",
        "topic": "monitors/CO2",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "b139ee09158667bc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 290,
        "y": 100,
        "wires": [
            [
                "8aead07bf6a62cf3",
                "e8949620bf82baa1",
                "7c48704391f75a86"
            ]
        ]
    },
    {
        "id": "4d174bbfe0c7ac84",
        "type": "mqtt in",
        "z": "1511cab232daa7c5",
        "name": "",
        "topic": "monitors/TEMP",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "b139ee09158667bc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 280,
        "y": 280,
        "wires": [
            [
                "fbe40413eee47130",
                "359c9de04b8ee7f9",
                "ec6e350407a067f2",
                "d5d1e7885f9b6a7e"
            ]
        ]
    },
    {
        "id": "df4732804393c9f0",
        "type": "mqtt out",
        "z": "1511cab232daa7c5",
        "name": "",
        "topic": "controls/RELAY",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b139ee09158667bc",
        "x": 460,
        "y": 780,
        "wires": []
    },
    {
        "id": "8ea977857efa0979",
        "type": "inject",
        "z": "1511cab232daa7c5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 620,
        "y": 640,
        "wires": [
            [
                "df4732804393c9f0"
            ]
        ]
    },
    {
        "id": "8aead07bf6a62cf3",
        "type": "function",
        "z": "1511cab232daa7c5",
        "name": "CO2",
        "func": "msg.payload= msg.payload.CO2_ppm;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 80,
        "wires": [
            [
                "fa88ce60f28aa4cb"
            ]
        ]
    },
    {
        "id": "fa88ce60f28aa4cb",
        "type": "ui_gauge",
        "z": "1511cab232daa7c5",
        "name": "CO2",
        "group": "fecde59cd7368a46",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "CO2",
        "label": "ppm",
        "format": "{{value}}",
        "min": 0,
        "max": "5000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 850,
        "y": 80,
        "wires": []
    },
    {
        "id": "c0d39a85cb1a53d5",
        "type": "ui_text",
        "z": "1511cab232daa7c5",
        "group": "fecde59cd7368a46",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "timestamp:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 870,
        "y": 140,
        "wires": []
    },
    {
        "id": "e8949620bf82baa1",
        "type": "function",
        "z": "1511cab232daa7c5",
        "name": "CO2 timestamp",
        "func": "msg.payload= msg.payload.timestamp;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 140,
        "wires": [
            [
                "c0d39a85cb1a53d5"
            ]
        ]
    },
    {
        "id": "fbe40413eee47130",
        "type": "function",
        "z": "1511cab232daa7c5",
        "name": "Temp",
        "func": "msg.payload = msg.payload[\"Temperature,C\"];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 240,
        "wires": [
            [
                "db0ce8bd4e554418"
            ]
        ]
    },
    {
        "id": "359c9de04b8ee7f9",
        "type": "function",
        "z": "1511cab232daa7c5",
        "name": "timestamp",
        "func": "msg.payload= msg.payload.timestamp;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 400,
        "wires": [
            [
                "229f3572f49017d6"
            ]
        ]
    },
    {
        "id": "ec6e350407a067f2",
        "type": "function",
        "z": "1511cab232daa7c5",
        "name": "Humidity",
        "func": "msg.payload = msg.payload[\"Humidity,%RH\"];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 280,
        "wires": [
            [
                "e5beaebfd00f8195"
            ]
        ]
    },
    {
        "id": "d5d1e7885f9b6a7e",
        "type": "function",
        "z": "1511cab232daa7c5",
        "name": "Pressure",
        "func": "msg.payload= msg.payload[\"Pressure,hPa\"];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 340,
        "wires": [
            [
                "062a4ece982c7961"
            ]
        ]
    },
    {
        "id": "db0ce8bd4e554418",
        "type": "ui_gauge",
        "z": "1511cab232daa7c5",
        "name": "",
        "group": "7bb5db2a6fd16341",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "compass",
        "title": "Temperature",
        "label": "C",
        "format": "{{value}}",
        "min": "10",
        "max": "40",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 870,
        "y": 240,
        "wires": []
    },
    {
        "id": "e5beaebfd00f8195",
        "type": "ui_gauge",
        "z": "1511cab232daa7c5",
        "name": "",
        "group": "7bb5db2a6fd16341",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "compass",
        "title": "Relative Humidity",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 890,
        "y": 280,
        "wires": []
    },
    {
        "id": "062a4ece982c7961",
        "type": "ui_gauge",
        "z": "1511cab232daa7c5",
        "name": "",
        "group": "7bb5db2a6fd16341",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "barometer",
        "label": "hPA",
        "format": "{{value}}",
        "min": 0,
        "max": "2000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 870,
        "y": 340,
        "wires": []
    },
    {
        "id": "229f3572f49017d6",
        "type": "ui_text",
        "z": "1511cab232daa7c5",
        "group": "7bb5db2a6fd16341",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "timestamp:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 870,
        "y": 400,
        "wires": []
    },
    {
        "id": "76b52134ec1d46bc",
        "type": "mqtt in",
        "z": "1511cab232daa7c5",
        "name": "",
        "topic": "monitors/RELAY",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "b139ee09158667bc",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 280,
        "y": 460,
        "wires": [
            [
                "c711c25ff843e8c9",
                "7d0175297475ba1f",
                "8f622d8c60b837f4"
            ]
        ]
    },
    {
        "id": "480d80a38cce8d2a",
        "type": "ui_led",
        "z": "1511cab232daa7c5",
        "order": 1,
        "group": "5ab9c7a919d4e89d",
        "width": 10,
        "height": 3,
        "label": "",
        "labelPlacement": "left",
        "labelAlignment": "left",
        "colorForValue": [
            {
                "color": "#ff0000",
                "value": "false",
                "valueType": "bool"
            },
            {
                "color": "#008000",
                "value": "true",
                "valueType": "bool"
            }
        ],
        "allowColorForValueInMessage": false,
        "shape": "circle",
        "showGlow": true,
        "name": "",
        "x": 810,
        "y": 460,
        "wires": []
    },
    {
        "id": "c711c25ff843e8c9",
        "type": "function",
        "z": "1511cab232daa7c5",
        "name": "Valve",
        "func": "msg.payload = msg.payload.valve.state;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 460,
        "wires": [
            [
                "480d80a38cce8d2a"
            ]
        ]
    },
    {
        "id": "7d0175297475ba1f",
        "type": "function",
        "z": "1511cab232daa7c5",
        "name": "last changed",
        "func": "msg.payload = msg.payload.valve.last_changed;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 540,
        "wires": [
            [
                "fe525fedfb319a7a"
            ]
        ]
    },
    {
        "id": "fe525fedfb319a7a",
        "type": "ui_text",
        "z": "1511cab232daa7c5",
        "group": "5ab9c7a919d4e89d",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Last changed:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 800,
        "y": 540,
        "wires": []
    },
    {
        "id": "7b9eb8895c32ec5e",
        "type": "ui_button",
        "z": "1511cab232daa7c5",
        "name": "",
        "group": "5ab9c7a919d4e89d",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "OPEN",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "on",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 150,
        "y": 720,
        "wires": [
            [
                "df4732804393c9f0"
            ]
        ]
    },
    {
        "id": "7b1f1ed2a11276e7",
        "type": "ui_button",
        "z": "1511cab232daa7c5",
        "name": "",
        "group": "5ab9c7a919d4e89d",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "CLOSE",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "off",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 800,
        "wires": [
            [
                "df4732804393c9f0"
            ]
        ]
    },
    {
        "id": "7c48704391f75a86",
        "type": "change",
        "z": "1511cab232daa7c5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "CO2",
                "pt": "global",
                "to": "payload.CO2_ppm",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 560,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "8f622d8c60b837f4",
        "type": "change",
        "z": "1511cab232daa7c5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "valve_state",
                "pt": "global",
                "to": "payload.valve.state",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "7dc819c3d9738393",
        "type": "watch",
        "z": "1511cab232daa7c5",
        "name": "",
        "files": "/home/pi/biocontrol/api/BME680.json",
        "recursive": "",
        "x": 240,
        "y": 960,
        "wires": [
            [
                "acb82e759a7df628"
            ]
        ]
    },
    {
        "id": "acb82e759a7df628",
        "type": "file in",
        "z": "1511cab232daa7c5",
        "name": "",
        "filename": "payload",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 580,
        "y": 960,
        "wires": [
            [
                "6b53949b53d887be"
            ]
        ]
    },
    {
        "id": "bc61153d128b1054",
        "type": "watch",
        "z": "1511cab232daa7c5",
        "name": "",
        "files": "/home/pi/biocontrol/api/k30_CO2.json",
        "recursive": "",
        "x": 250,
        "y": 1040,
        "wires": [
            [
                "9c51e9c3d9f10ef1"
            ]
        ]
    },
    {
        "id": "844bd3f9545542bf",
        "type": "watch",
        "z": "1511cab232daa7c5",
        "name": "",
        "files": "/home/pi/biocontrol/api/relays.json",
        "recursive": "",
        "x": 240,
        "y": 1120,
        "wires": [
            [
                "801c6cd50c4cbc10"
            ]
        ]
    },
    {
        "id": "6b53949b53d887be",
        "type": "json",
        "z": "1511cab232daa7c5",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 810,
        "y": 960,
        "wires": [
            [
                "407d6d83d10766ec"
            ]
        ]
    },
    {
        "id": "9c51e9c3d9f10ef1",
        "type": "file in",
        "z": "1511cab232daa7c5",
        "name": "",
        "filename": "payload",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 580,
        "y": 1040,
        "wires": [
            [
                "0f6dbfbe2a106f66"
            ]
        ]
    },
    {
        "id": "0f6dbfbe2a106f66",
        "type": "json",
        "z": "1511cab232daa7c5",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 810,
        "y": 1040,
        "wires": [
            [
                "19eb848f682edfd0"
            ]
        ]
    },
    {
        "id": "801c6cd50c4cbc10",
        "type": "file in",
        "z": "1511cab232daa7c5",
        "name": "",
        "filename": "payload",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 560,
        "y": 1120,
        "wires": [
            [
                "254ef488a7b56056"
            ]
        ]
    },
    {
        "id": "254ef488a7b56056",
        "type": "json",
        "z": "1511cab232daa7c5",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 790,
        "y": 1120,
        "wires": [
            [
                "b91f3d039f655e81"
            ]
        ]
    },
    {
        "id": "407d6d83d10766ec",
        "type": "change",
        "z": "1511cab232daa7c5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "BME680.status",
                "pt": "global",
                "to": "payload.status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "BME680.timestamp",
                "pt": "global",
                "to": "payload.sensor_data.timestamp",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "BME680.temperature",
                "pt": "global",
                "to": "payload.sensor_data['Temperature,C']",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "BME680.humidity",
                "pt": "global",
                "to": "payload.sensor_data['Humidity,%RH']",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1020,
        "y": 960,
        "wires": [
            [
                "c33fae8b7df7328f"
            ]
        ]
    },
    {
        "id": "19eb848f682edfd0",
        "type": "change",
        "z": "1511cab232daa7c5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "K30.status",
                "pt": "global",
                "to": "payload.status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "K30.timestamp",
                "pt": "global",
                "to": "payload.sensor_data.timestamp",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "K30.temperature",
                "pt": "global",
                "to": "payload.sensor_data['CO2_ppm']",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1000,
        "y": 1040,
        "wires": [
            [
                "399bb5a2769de941"
            ]
        ]
    },
    {
        "id": "b91f3d039f655e81",
        "type": "change",
        "z": "1511cab232daa7c5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "valve.status",
                "pt": "global",
                "to": "payload.status",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "valve.timestamp",
                "pt": "global",
                "to": "payload['last updated']",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "valve.last_updated",
                "pt": "global",
                "to": "payload.control_data.valve.last_changed",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "valve.state",
                "pt": "global",
                "to": "payload.control_data.valve.state",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 1120,
        "wires": [
            [
                "045baba4dc73ded5"
            ]
        ]
    },
    {
        "id": "c33fae8b7df7328f",
        "type": "link out",
        "z": "1511cab232daa7c5",
        "name": "BM680",
        "mode": "link",
        "links": [
            "6e3659c294ebd97d"
        ],
        "x": 1225,
        "y": 960,
        "wires": []
    },
    {
        "id": "399bb5a2769de941",
        "type": "link out",
        "z": "1511cab232daa7c5",
        "name": "K30",
        "mode": "link",
        "links": [
            "c347cfe8a37ecca4"
        ],
        "x": 1215,
        "y": 1040,
        "wires": []
    },
    {
        "id": "045baba4dc73ded5",
        "type": "link out",
        "z": "1511cab232daa7c5",
        "name": "valve",
        "mode": "link",
        "links": [
            "289d322d910983dd"
        ],
        "x": 1205,
        "y": 1120,
        "wires": []
    },
    {
        "id": "fed70d426beeee57",
        "type": "ui_form",
        "z": "1f3381b7ec8c93c4",
        "name": "Set Thresh form",
        "label": "",
        "group": "5ab9c7a919d4e89d",
        "order": 7,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Lower CO2 Threshold",
                "value": "lower_thresh",
                "type": "number",
                "required": true,
                "rows": null
            },
            {
                "label": "upper CO2 Threshold",
                "value": "upper_thresh",
                "type": "number",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "lower_thresh": "",
            "upper_thresh": ""
        },
        "payload": "",
        "submit": "Set Values",
        "cancel": "clear",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 200,
        "y": 120,
        "wires": [
            [
                "74abe7a457e6d011"
            ]
        ]
    },
    {
        "id": "74abe7a457e6d011",
        "type": "change",
        "z": "1f3381b7ec8c93c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "lower_thresh",
                "pt": "flow",
                "to": "payload.lower_thresh",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "upper_thresh",
                "pt": "flow",
                "to": "payload.upper_thresh",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 120,
        "wires": [
            [
                "2da85652bbe16502",
                "323acb3f6defcb93"
            ]
        ]
    },
    {
        "id": "81ed7b18e9e43d8f",
        "type": "ui_text",
        "z": "1f3381b7ec8c93c4",
        "group": "5ab9c7a919d4e89d",
        "order": 8,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "lower:",
        "format": "{{msg.payload}} ppm",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 870,
        "y": 120,
        "wires": []
    },
    {
        "id": "2da85652bbe16502",
        "type": "function",
        "z": "1f3381b7ec8c93c4",
        "name": "function 1",
        "func": "msg.payload = flow.get('lower_thresh');\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 120,
        "wires": [
            [
                "81ed7b18e9e43d8f"
            ]
        ]
    },
    {
        "id": "323acb3f6defcb93",
        "type": "function",
        "z": "1f3381b7ec8c93c4",
        "name": "function 2",
        "func": "msg.payload = flow.get('upper_thresh');\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 160,
        "wires": [
            [
                "6c8d08e414cf71ce"
            ]
        ]
    },
    {
        "id": "6c8d08e414cf71ce",
        "type": "ui_text",
        "z": "1f3381b7ec8c93c4",
        "group": "5ab9c7a919d4e89d",
        "order": 9,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "upper:",
        "format": "{{msg.payload}} ppm",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 870,
        "y": 160,
        "wires": []
    },
    {
        "id": "714330b3099990b1",
        "type": "ui_button",
        "z": "1f3381b7ec8c93c4",
        "name": "",
        "group": "5ab9c7a919d4e89d",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Start",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 210,
        "y": 440,
        "wires": [
            [
                "ab6bc03f506a54ec"
            ]
        ]
    },
    {
        "id": "ed31a2d3ff66e797",
        "type": "ui_button",
        "z": "1f3381b7ec8c93c4",
        "name": "",
        "group": "5ab9c7a919d4e89d",
        "order": 11,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Stop",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 170,
        "y": 820,
        "wires": [
            [
                "94bf82c685cb1365",
                "a1f0374ec6486513"
            ]
        ]
    },
    {
        "id": "e64c622e278020f9",
        "type": "change",
        "z": "1f3381b7ec8c93c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "auto_mode",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "8f43db06886dde95",
        "type": "inject",
        "z": "1f3381b7ec8c93c4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 40,
        "wires": [
            [
                "e64c622e278020f9"
            ]
        ]
    },
    {
        "id": "ab6bc03f506a54ec",
        "type": "change",
        "z": "1f3381b7ec8c93c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "auto_mode",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 440,
        "wires": [
            [
                "1b777bdec0f1e553",
                "37d7b1e4bee56d8e"
            ]
        ]
    },
    {
        "id": "9099f94cd8041260",
        "type": "mqtt out",
        "z": "1f3381b7ec8c93c4",
        "name": "",
        "topic": "controls/RELAY",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b139ee09158667bc",
        "x": 1540,
        "y": 440,
        "wires": []
    },
    {
        "id": "a1f0374ec6486513",
        "type": "function",
        "z": "1f3381b7ec8c93c4",
        "name": "off",
        "func": "msg.payload = 'off';\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 820,
        "wires": [
            [
                "9099f94cd8041260"
            ]
        ]
    },
    {
        "id": "94bf82c685cb1365",
        "type": "change",
        "z": "1f3381b7ec8c93c4",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "auto_mode",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 140,
        "y": 580,
        "wires": [
            [
                "714330b3099990b1",
                "fed70d426beeee57"
            ]
        ]
    },
    {
        "id": "e85c032537059c6f",
        "type": "delay",
        "z": "1f3381b7ec8c93c4",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 840,
        "y": 320,
        "wires": [
            [
                "1b777bdec0f1e553"
            ]
        ]
    },
    {
        "id": "c5c260592a4c2df2",
        "type": "function",
        "z": "1f3381b7ec8c93c4",
        "name": "Check threshold conditions",
        "func": "let co2 = global.get('CO2')\nlet valve_state = global.get('valve_state')\n\nlet lower_thresh = flow.get('lower_thresh'); \nlet upper_thresh = flow.get('upper_thresh');\n\n\nif (co2 <= lower_thresh && !valve_state){\n    msg.payload = \"on\"\n}else if (co2 >= upper_thresh && valve_state) {\n    msg.payload = \"off\"\n} else{\n    msg.payload = null\n}\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 420,
        "wires": [
            [
                "e85c032537059c6f",
                "44373408c8cc46f9"
            ]
        ]
    },
    {
        "id": "1b777bdec0f1e553",
        "type": "switch",
        "z": "1f3381b7ec8c93c4",
        "name": "",
        "property": "auto_mode",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 440,
        "wires": [
            [
                "c5c260592a4c2df2"
            ],
            []
        ]
    },
    {
        "id": "37d7b1e4bee56d8e",
        "type": "function",
        "z": "1f3381b7ec8c93c4",
        "name": "disable",
        "func": "msg.enabled = false\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 320,
        "wires": [
            [
                "714330b3099990b1",
                "fed70d426beeee57"
            ]
        ]
    },
    {
        "id": "44373408c8cc46f9",
        "type": "function",
        "z": "1f3381b7ec8c93c4",
        "name": "check if message exists",
        "func": "if(msg.payload){\n    msg = msg;\n}else{\n    msg=null;\n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 420,
        "wires": [
            [
                "9099f94cd8041260"
            ]
        ]
    },
    {
        "id": "e7bbced3a1f27496",
        "type": "ui_text",
        "z": "1f3381b7ec8c93c4",
        "group": "5ab9c7a919d4e89d",
        "order": 6,
        "width": 10,
        "height": 2,
        "name": "Automode Label",
        "label": "",
        "format": "Auto Mode",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1140,
        "y": 20,
        "wires": []
    },
    {
        "id": "9d738014cd661b7c",
        "type": "ui_text",
        "z": "1f3381b7ec8c93c4",
        "group": "5ab9c7a919d4e89d",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Manual Label",
        "label": "",
        "format": "Manual Control",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1140,
        "y": 80,
        "wires": []
    },
    {
        "id": "6d40a8baf51331b9",
        "type": "ui_form",
        "z": "84c549d1e2d30361",
        "name": "sef file name form",
        "label": "",
        "group": "86c33c0260dcb520",
        "order": 1,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Trial name",
                "value": "trial_name",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Sub folder (Optional)",
                "value": "sub_folder",
                "type": "text",
                "required": false,
                "rows": null
            }
        ],
        "formValue": {
            "trial_name": "",
            "sub_folder": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "cancel",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 290,
        "y": 360,
        "wires": [
            [
                "fcbd6ea02ea21338"
            ]
        ]
    },
    {
        "id": "fcbd6ea02ea21338",
        "type": "change",
        "z": "84c549d1e2d30361",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "trial_name",
                "pt": "flow",
                "to": "payload.trial_name",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "sub_folder",
                "pt": "flow",
                "to": "payload.sub_folder",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 360,
        "wires": [
            [
                "09b2ee64d6133d10",
                "35cfb27d47110b4a",
                "4dd8dade0fd30632"
            ]
        ]
    },
    {
        "id": "970bee3895378227",
        "type": "inject",
        "z": "84c549d1e2d30361",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 260,
        "wires": [
            [
                "44e5b0180ded2a7a"
            ]
        ]
    },
    {
        "id": "44e5b0180ded2a7a",
        "type": "change",
        "z": "84c549d1e2d30361",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "logging",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "trial_name",
                "pt": "flow",
                "to": "default_trail",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "sub_folder",
                "pt": "flow",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 260,
        "wires": [
            [
                "09b2ee64d6133d10",
                "4dd8dade0fd30632",
                "35cfb27d47110b4a"
            ]
        ]
    },
    {
        "id": "09b2ee64d6133d10",
        "type": "function",
        "z": "84c549d1e2d30361",
        "name": "function 3",
        "func": "let trial_name =  flow.get('trial_name');\nlet sub_folder;\n\n if (flow.get('sub_folder')){\n    sub_folder = '/' + flow.get('sub_folder')+'/';\n } else{\n     sub_folder = '/'\n }\n\n\nmsg.payload= \"/home/pi/biocontrol/data\" + sub_folder + trial_name;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 360,
        "wires": [
            [
                "2897c5af7bdd1c5c"
            ]
        ]
    },
    {
        "id": "2897c5af7bdd1c5c",
        "type": "change",
        "z": "84c549d1e2d30361",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "filename_base",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 980,
        "y": 360,
        "wires": [
            [
                "aac2cc395e5e5993"
            ]
        ]
    },
    {
        "id": "f3f776b25a8b2e27",
        "type": "ui_text",
        "z": "84c549d1e2d30361",
        "group": "86c33c0260dcb520",
        "order": 3,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Sub folder:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1390,
        "y": 420,
        "wires": []
    },
    {
        "id": "e039be2e80299445",
        "type": "ui_text",
        "z": "84c549d1e2d30361",
        "group": "86c33c0260dcb520",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "File:",
        "format": "{{msg.payload}}_{sensor}.csv",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1390,
        "y": 360,
        "wires": []
    },
    {
        "id": "e4ac7948022717d6",
        "type": "ui_text",
        "z": "84c549d1e2d30361",
        "group": "86c33c0260dcb520",
        "order": 2,
        "width": 5,
        "height": 1,
        "name": "",
        "label": "Trial Name:",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": 16,
        "color": "#000000",
        "x": 1390,
        "y": 480,
        "wires": []
    },
    {
        "id": "35cfb27d47110b4a",
        "type": "change",
        "z": "84c549d1e2d30361",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "trial_name",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 480,
        "wires": [
            [
                "e4ac7948022717d6"
            ]
        ]
    },
    {
        "id": "4dd8dade0fd30632",
        "type": "change",
        "z": "84c549d1e2d30361",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "sub_folder",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 420,
        "wires": [
            [
                "f3f776b25a8b2e27"
            ]
        ]
    },
    {
        "id": "aac2cc395e5e5993",
        "type": "change",
        "z": "84c549d1e2d30361",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "filename_base",
                "tot": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 360,
        "wires": [
            [
                "e039be2e80299445"
            ]
        ]
    },
    {
        "id": "6e3659c294ebd97d",
        "type": "link in",
        "z": "84c549d1e2d30361",
        "name": "bme680 in 1",
        "links": [
            "c33fae8b7df7328f"
        ],
        "x": 205,
        "y": 780,
        "wires": [
            [
                "80e1ddffbc301262"
            ]
        ]
    },
    {
        "id": "c347cfe8a37ecca4",
        "type": "link in",
        "z": "84c549d1e2d30361",
        "name": "K30 in 1",
        "links": [
            "399bb5a2769de941"
        ],
        "x": 205,
        "y": 840,
        "wires": [
            [
                "102e7b527bbc7c9e"
            ]
        ]
    },
    {
        "id": "289d322d910983dd",
        "type": "link in",
        "z": "84c549d1e2d30361",
        "name": "valve in 1",
        "links": [
            "045baba4dc73ded5"
        ],
        "x": 205,
        "y": 900,
        "wires": [
            [
                "e7d44ed1c58820ca"
            ]
        ]
    },
    {
        "id": "80e1ddffbc301262",
        "type": "switch",
        "z": "84c549d1e2d30361",
        "name": "",
        "property": "logging",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 780,
        "wires": [
            [
                "7ab1fd211f5cf202"
            ],
            []
        ]
    },
    {
        "id": "102e7b527bbc7c9e",
        "type": "switch",
        "z": "84c549d1e2d30361",
        "name": "",
        "property": "logging",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 840,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "e7d44ed1c58820ca",
        "type": "switch",
        "z": "84c549d1e2d30361",
        "name": "",
        "property": "logging",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 900,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "69b88b50b6a953fa",
        "type": "ui_button",
        "z": "84c549d1e2d30361",
        "name": "",
        "group": "86c33c0260dcb520",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Start Logging",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 250,
        "y": 500,
        "wires": [
            [
                "145c365fed9a9f08"
            ]
        ]
    },
    {
        "id": "70e75f37f730798c",
        "type": "ui_button",
        "z": "84c549d1e2d30361",
        "name": "",
        "group": "86c33c0260dcb520",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Stop Logging",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 230,
        "y": 620,
        "wires": [
            [
                "c6fc1698512b3570"
            ]
        ]
    },
    {
        "id": "145c365fed9a9f08",
        "type": "change",
        "z": "84c549d1e2d30361",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "logging",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 500,
        "wires": [
            [
                "69b88b50b6a953fa",
                "6d40a8baf51331b9"
            ]
        ]
    },
    {
        "id": "c6fc1698512b3570",
        "type": "change",
        "z": "84c549d1e2d30361",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "logging",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "enabled",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 620,
        "wires": [
            [
                "69b88b50b6a953fa",
                "6d40a8baf51331b9"
            ]
        ]
    },
    {
        "id": "83df850bd16657cd",
        "type": "csv",
        "z": "84c549d1e2d30361",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1170,
        "y": 780,
        "wires": [
            [
                "72f6824e9fd68a26"
            ]
        ]
    },
    {
        "id": "7ab1fd211f5cf202",
        "type": "change",
        "z": "84c549d1e2d30361",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "BME680",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 780,
        "wires": [
            [
                "9d697c2b303b4377"
            ]
        ]
    },
    {
        "id": "9d697c2b303b4377",
        "type": "function",
        "z": "84c549d1e2d30361",
        "name": "processeing BME680",
        "func": "delete msg.payload.status;\nconst fs = global.get('fs');\n\n\nlet filename_base = flow.get('filename_base');\nvar filePath_base = filename_base + \"_BME680_\";\nlet ext = '.csv';\n\nlet index = 1;\nlet latestIndex = 1;\nlet latestFilePath = filePath_base + index + ext;\n\n// Function to check if a file exists\nfunction checkFileExistsSync(filepath) {\n    let flag = true;\n    try {\n        fs.accessSync(filepath, fs.constants.F_OK);\n    } catch (e) {\n        flag = false;\n    }\n    return flag;\n}\n\nfunction checkFile_exceedsMax(filePath){\n\n    const maxLines = 10000;\n    let flag=false;\n\n    if (checkFileExistsSync(filePath)){\n\n        const lines = fs.readFileSync(filePath, 'utf8').split('\\n');\n\n        if (lines.length>maxLines){\n            flag=true;\n        }\n\n    }\n    return flag\n}\n\n\nwhile(true){\n    let filePath = filePath_base + index + ext;\n\n    if (checkFileExistsSync(filePath)){\n        latestFilePath = filePath;\n        latestIndex = index\n        index++;\n    } else{\n        break;\n    }\n}\n\nif (checkFile_exceedsMax(latestFilePath)){\n    latestIndex++\n    msg.filePath = filePath_base + latestIndex + ext;\n}else{\n    msg.filePath= latestFilePath;\n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 780,
        "wires": [
            [
                "83df850bd16657cd"
            ]
        ]
    },
    {
        "id": "72f6824e9fd68a26",
        "type": "file",
        "z": "84c549d1e2d30361",
        "name": "",
        "filename": "filePath",
        "filenameType": "msg",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1380,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "c115ac8a531d3f51",
        "type": "debug",
        "z": "84c549d1e2d30361",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 660,
        "wires": []
    },
    {
        "id": "4fa73dd9.83cca4",
        "type": "comment",
        "z": "67e1ea71ee09ad87",
        "name": "File Browser",
        "info": "1) Update the default folder in the Init node\n2) Update the default folder in the Reset node as well\n3) You can duplicate the Reset nodes and use them as saved shortcuts\n4) Check the Convert Timestamps function node if you want to see your dates in a different format. I just used the Javascript toISOString format.\n5) The Graph button can read any CSV file which have any number of values, but the first column always contains a timestamp column with javascript timestamp of the data point.",
        "x": 190,
        "y": 80,
        "wires": []
    },
    {
        "id": "993d7272.843ae",
        "type": "fs-file-lister",
        "z": "67e1ea71ee09ad87",
        "name": "Files",
        "start": "/home/pi",
        "pattern": "*.*",
        "folders": "*",
        "hidden": false,
        "lstype": "files",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": false,
        "x": 590,
        "y": 180,
        "wires": [
            [
                "dd88bd23.37cde",
                "3e094f82.15d6e"
            ]
        ]
    },
    {
        "id": "d185a45.2327a58",
        "type": "inject",
        "z": "67e1ea71ee09ad87",
        "name": "Init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "change",
        "payload": "/home/pi/biocontrol/data",
        "payloadType": "str",
        "x": 190,
        "y": 140,
        "wires": [
            [
                "3d4e5e51.bdf952"
            ]
        ]
    },
    {
        "id": "a715f7a4.a398a8",
        "type": "ui_button",
        "z": "67e1ea71ee09ad87",
        "name": "",
        "group": "160e81fb.f1c86e",
        "order": 1,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Refresh",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "refresh",
        "payload": "",
        "payloadType": "str",
        "topic": "refresh",
        "topicType": "str",
        "x": 180,
        "y": 180,
        "wires": [
            [
                "3d4e5e51.bdf952"
            ]
        ]
    },
    {
        "id": "eb17c7ee.e61988",
        "type": "ui_dropdown",
        "z": "67e1ea71ee09ad87",
        "name": "File Selector",
        "label": "",
        "tooltip": "",
        "place": "Select a file",
        "group": "160e81fb.f1c86e",
        "order": 8,
        "width": 7,
        "height": 1,
        "passthru": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 990,
        "y": 180,
        "wires": [
            [
                "be4830df.5775d"
            ]
        ]
    },
    {
        "id": "dd88bd23.37cde",
        "type": "function",
        "z": "67e1ea71ee09ad87",
        "name": "Format data",
        "func": "// format the data for the dropdown\nmsg.options = [];\nfor (var i=0; i<msg.payload.length; i++) {\n    // This is a file\n    obj = {};\n    obj [msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '')]=msg.payload[i].name;\n    msg.options.push(obj);\n}\nmsg.payload={};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 790,
        "y": 180,
        "wires": [
            [
                "eb17c7ee.e61988"
            ]
        ]
    },
    {
        "id": "638728aa.cd0b08",
        "type": "ui_template",
        "z": "67e1ea71ee09ad87",
        "group": "160e81fb.f1c86e",
        "name": "",
        "order": 5,
        "width": 18,
        "height": 6,
        "format": "<div ng-bind-html=\"msg.payload\" height=\"400\" style=\"height: 400px;\"><br/>\n</div>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 1180,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "9d27e846.b31db8",
        "type": "template",
        "z": "67e1ea71ee09ad87",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<table width=\"100%\">\n    <tr><th>File Name</th><th>Size</th><th>Created</th><th>Changed</th></tr>\n    {{#payload}}\n        <tr>\n            <td><a href=\"/download?filename={{name}}\" target=\"blank\">{{fname}}</a></td>\n            <td>{{stat.size}}</td>\n            <td>{{stat.created}}</td>\n            <td>{{stat.changed}}</td>\n        </tr>\n    {{/payload}}\n</table>\n",
        "output": "str",
        "x": 1020,
        "y": 240,
        "wires": [
            [
                "638728aa.cd0b08"
            ]
        ]
    },
    {
        "id": "3e094f82.15d6e",
        "type": "function",
        "z": "67e1ea71ee09ad87",
        "name": "Convert timestamps",
        "func": "for (var i=0; i<msg.payload.length; i++) {\n    msg.payload[i].stat.created = msg.payload[i].stat.created.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.changed = msg.payload[i].stat.changed.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.accessed = msg.payload[i].stat.accessed.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].stat.statusChanged = msg.payload[i].stat.statusChanged.toISOString().slice(0, 19).replace('T', ' ');\n    msg.payload[i].fname = msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '');\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 820,
        "y": 240,
        "wires": [
            [
                "9d27e846.b31db8"
            ]
        ]
    },
    {
        "id": "7b7e0d58.05e244",
        "type": "ui_button",
        "z": "67e1ea71ee09ad87",
        "name": "",
        "group": "160e81fb.f1c86e",
        "order": 9,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Delete",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "delete",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 210,
        "y": 340,
        "wires": [
            [
                "8da8147a.999af8"
            ]
        ]
    },
    {
        "id": "7d490dd1.8458b4",
        "type": "function",
        "z": "67e1ea71ee09ad87",
        "name": "Get filename",
        "func": "// Get the filename from the flow context\nlet filename = flow.get(\"fileselected\");\n\n// check, if the filename is undefined that means it does not exist yet, nothing is selected yet\n// return: do not output anything\nif (filename===undefined) {\n    return;\n}\n\n// return the filename to the file-in node to delete\nmsg.filename = filename;\n\nif (msg.filename.replace(/^.*(\\\\|\\/|\\:)/, '')[0]!==\".\") {\n    // Only do this if this is a file, we don't delete folders\n    // and delete the context/selection as we are deleting the file as well\n    flow.set(\"fileselected\");\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 410,
        "y": 400,
        "wires": [
            [
                "372ee262.fc94de"
            ]
        ]
    },
    {
        "id": "372ee262.fc94de",
        "type": "file",
        "z": "67e1ea71ee09ad87",
        "name": "Delete file",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "delete",
        "encoding": "none",
        "x": 620,
        "y": 400,
        "wires": [
            [
                "993d7272.843ae",
                "5219875b.c070d8"
            ]
        ]
    },
    {
        "id": "aa8c482.93734b8",
        "type": "http in",
        "z": "67e1ea71ee09ad87",
        "name": "",
        "url": "/download",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 540,
        "wires": [
            [
                "d969ba04.e24028"
            ]
        ]
    },
    {
        "id": "d19cc7d8.646328",
        "type": "http response",
        "z": "67e1ea71ee09ad87",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1010,
        "y": 540,
        "wires": []
    },
    {
        "id": "d969ba04.e24028",
        "type": "function",
        "z": "67e1ea71ee09ad87",
        "name": "Get the file name",
        "func": "msg.filename = msg.req.query.filename;\nmsg.contentdisposition = \"attachment; filename=\\\"\" + msg.req.query.filename.replace(/^.*(\\\\|\\/|\\:)/, '') + \"\\\"\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "x": 470,
        "y": 540,
        "wires": [
            [
                "e92381c3.c4cd2"
            ]
        ],
        "outputLabels": [
            "Folder selected",
            "File selected"
        ]
    },
    {
        "id": "e92381c3.c4cd2",
        "type": "file in",
        "z": "67e1ea71ee09ad87",
        "name": "",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 660,
        "y": 540,
        "wires": [
            [
                "99ff4953.d0d5c8"
            ]
        ]
    },
    {
        "id": "99ff4953.d0d5c8",
        "type": "change",
        "z": "67e1ea71ee09ad87",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "text/csv",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "headers.Content-Disposition",
                "pt": "msg",
                "to": "contentdisposition",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 540,
        "wires": [
            [
                "d19cc7d8.646328"
            ]
        ]
    },
    {
        "id": "2519dd0d.54d6b2",
        "type": "ui_button",
        "z": "67e1ea71ee09ad87",
        "name": "",
        "group": "160e81fb.f1c86e",
        "order": 10,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Graph",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "show_chart",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 170,
        "y": 660,
        "wires": [
            [
                "30f41c01.358a54"
            ]
        ]
    },
    {
        "id": "30f41c01.358a54",
        "type": "function",
        "z": "67e1ea71ee09ad87",
        "name": "Get filename",
        "func": "// Get the filename from the flow context\nlet filename = flow.get(\"fileselected\");\n\n// check, if the filename is undefined that means it does not exist yet, nothing is selected yet\n// return: do not output anything\nif (filename===undefined) {\n    return;\n}\n\n// return the filename to the file-in node to delete\nmsg.filename = filename;\n\nif (msg.filename.replace(/^.*(\\\\|\\/|\\:)/, '')[0]!==\".\") {\n    // Only do this if this is a file, we don't delete folders\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 340,
        "y": 660,
        "wires": [
            [
                "4f4072b6.0c320c"
            ]
        ]
    },
    {
        "id": "4f4072b6.0c320c",
        "type": "file in",
        "z": "67e1ea71ee09ad87",
        "name": "",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 520,
        "y": 660,
        "wires": [
            [
                "4d254665.d508e8"
            ]
        ]
    },
    {
        "id": "4d254665.d508e8",
        "type": "csv",
        "z": "67e1ea71ee09ad87",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "x": 670,
        "y": 660,
        "wires": [
            [
                "7dcec769.580718"
            ]
        ]
    },
    {
        "id": "84810f0e.43f4e",
        "type": "debug",
        "z": "67e1ea71ee09ad87",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1090,
        "y": 620,
        "wires": []
    },
    {
        "id": "7dcec769.580718",
        "type": "function",
        "z": "67e1ea71ee09ad87",
        "name": "Format data for chart",
        "func": "var chart = [{\n    \"series\":[],\n    \"data\":[],\n    \"labels\":[msg.filename]\n}];\n\n\n/*\nvar pressure = [];\nvar out2 = [];\n\nfor (var i=0; i<msg.payload.length; i++) {\n    pressure.push({\"x\":msg.payload[i].timestamp, \"y\":msg.payload[i].pressure});\n    out2.push({\"x\":msg.payload[i].timestamp, \"y\":msg.payload[i].out2*200});\n\n}\nchart[0].data.push(pressure);\nchart[0].data.push(out2);\n*/\n\nlet columns = 0;\n\nfor(var series in msg.payload[0]) {\n    if(series!==\"timestamp\") {\n        chart[0].series.push(series);\n        chart[0].data.push([]);\n        columns++;\n    }\n}\n\n\nfor (var j=0; j<msg.payload.length; j++) {\n   for(var i=0;i<columns;i++) {\n       chart[0].data[i].push({\"x\":msg.payload[j].timestamp, \"y\":msg.payload[j][chart[0].series[i]]});\n   } \n}\n\n\n\n\nmsg.payload = chart;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 660,
        "wires": [
            [
                "5022cb53.8adc44",
                "84810f0e.43f4e"
            ]
        ]
    },
    {
        "id": "5022cb53.8adc44",
        "type": "ui_chart",
        "z": "67e1ea71ee09ad87",
        "name": "",
        "group": "160e81fb.f1c86e",
        "order": 11,
        "width": 18,
        "height": 6,
        "label": "",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1080,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "554f0095.ac1b2",
        "type": "ui_toast",
        "z": "67e1ea71ee09ad87",
        "position": "dialog",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 1,
        "ok": "Yes",
        "cancel": "No",
        "raw": false,
        "topic": "",
        "name": "Confirmation",
        "x": 590,
        "y": 340,
        "wires": [
            [
                "24df84fe.ebf45c"
            ]
        ]
    },
    {
        "id": "8da8147a.999af8",
        "type": "change",
        "z": "67e1ea71ee09ad87",
        "name": "Set message",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Delete confirmation",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Are you sure you want to delete this file?",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 340,
        "wires": [
            [
                "554f0095.ac1b2"
            ]
        ]
    },
    {
        "id": "24df84fe.ebf45c",
        "type": "switch",
        "z": "67e1ea71ee09ad87",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Yes",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 790,
        "y": 340,
        "wires": [
            [
                "7d490dd1.8458b4"
            ]
        ]
    },
    {
        "id": "3d4e5e51.bdf952",
        "type": "function",
        "z": "67e1ea71ee09ad87",
        "name": "Folder handling",
        "func": "let folder = context.get(\"folder\");\nif (folder===undefined) {\n    folder=\"/\";\n    context.set(\"folder\", folder);\n}\n\nlet hidden = context.get(\"hidden\");\nif (hidden===undefined) {\n    hidden=false;\n    context.set(\"hidden\", hidden);\n}\n\nif (msg.topic===\"up\") {\n    var the_arr = folder.split('/');\n    the_arr.pop();\n    folder=the_arr.join('/'); \n    context.set(\"folder\", folder);\n}\nif (msg.topic===\"change\") {\n    folder=msg.payload;    \n    context.set(\"folder\", folder);\n}\nif (msg.topic===\"hidden\") {\n    hidden=msg.payload;    \n    context.set(\"hidden\", hidden);\n}\n\nmsg.payload = {\"start\":folder, \"hidden\": hidden};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 240,
        "wires": [
            [
                "993d7272.843ae",
                "399ac341.7d43bc",
                "5219875b.c070d8"
            ]
        ]
    },
    {
        "id": "399ac341.7d43bc",
        "type": "ui_text",
        "z": "67e1ea71ee09ad87",
        "group": "160e81fb.f1c86e",
        "order": 3,
        "width": 12,
        "height": 1,
        "name": "",
        "label": "Folder:",
        "format": "{{msg.payload.start}}",
        "layout": "row-left",
        "x": 580,
        "y": 120,
        "wires": []
    },
    {
        "id": "80940e39.5035b",
        "type": "ui_button",
        "z": "67e1ea71ee09ad87",
        "name": "",
        "group": "160e81fb.f1c86e",
        "order": 7,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Open",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "folder_open",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 210,
        "y": 460,
        "wires": [
            [
                "8c1dfaac.979588"
            ]
        ]
    },
    {
        "id": "8c1dfaac.979588",
        "type": "function",
        "z": "67e1ea71ee09ad87",
        "name": "Change folder",
        "func": "// Get the filename from the flow context\nlet folderselected = flow.get(\"folderselected\");\n\n// check, if the filename is undefined that means it does not exist yet, nothing is selected yet\n// return: do not output anything\nif (folderselected===undefined) {\n    return;\n}\n\nmsg.topic = \"change\";\nmsg.payload = folderselected;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 420,
        "y": 460,
        "wires": [
            [
                "3d4e5e51.bdf952"
            ]
        ]
    },
    {
        "id": "58414ec4.c716e",
        "type": "ui_button",
        "z": "67e1ea71ee09ad87",
        "name": "",
        "group": "160e81fb.f1c86e",
        "order": 2,
        "width": 2,
        "height": 1,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "autorenew",
        "payload": "/home/pi/biocontrol/data",
        "payloadType": "str",
        "topic": "change",
        "topicType": "str",
        "x": 190,
        "y": 220,
        "wires": [
            [
                "3d4e5e51.bdf952"
            ]
        ]
    },
    {
        "id": "5219875b.c070d8",
        "type": "fs-file-lister",
        "z": "67e1ea71ee09ad87",
        "name": "Folders",
        "start": "/home/pi",
        "pattern": "*.*",
        "folders": "*",
        "hidden": false,
        "lstype": "directories",
        "path": true,
        "single": true,
        "depth": 0,
        "stat": true,
        "showWarnings": false,
        "x": 600,
        "y": 280,
        "wires": [
            [
                "ebc234be.d53fe8"
            ]
        ]
    },
    {
        "id": "37485c24.212054",
        "type": "ui_dropdown",
        "z": "67e1ea71ee09ad87",
        "name": "Folder Selector",
        "label": "",
        "tooltip": "",
        "place": "Select a folder",
        "group": "160e81fb.f1c86e",
        "order": 6,
        "width": 5,
        "height": 1,
        "passthru": false,
        "options": [
            {
                "label": "",
                "value": "",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "",
        "x": 1000,
        "y": 280,
        "wires": [
            [
                "2875c79f.531558"
            ]
        ]
    },
    {
        "id": "ebc234be.d53fe8",
        "type": "function",
        "z": "67e1ea71ee09ad87",
        "name": "Format data",
        "func": "// format the data for the dropdown\nmsg.options = [];\nfor (var i=0; i<msg.payload.length; i++) {\n    // This is a foler\n    obj = {};\n    obj [\"[\"+msg.payload[i].name.replace(/^.*(\\\\|\\/|\\:)/, '')+\"]\"]=msg.payload[i].name;\n    msg.options.push(obj);\n}\nmsg.payload={};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 790,
        "y": 280,
        "wires": [
            [
                "37485c24.212054"
            ]
        ]
    },
    {
        "id": "be4830df.5775d",
        "type": "change",
        "z": "67e1ea71ee09ad87",
        "name": "Save selection",
        "rules": [
            {
                "t": "set",
                "p": "fileselected",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "2875c79f.531558",
        "type": "change",
        "z": "67e1ea71ee09ad87",
        "name": "Save selection",
        "rules": [
            {
                "t": "set",
                "p": "folderselected",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "928e60a7.994be",
        "type": "ui_switch",
        "z": "67e1ea71ee09ad87",
        "name": "",
        "label": "Hidden",
        "tooltip": "Show hidden files or not",
        "group": "160e81fb.f1c86e",
        "order": 4,
        "width": 2,
        "height": 1,
        "passthru": false,
        "decouple": "false",
        "topic": "hidden",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "check_box",
        "oncolor": "#000000",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "check_box_outline_blank",
        "offcolor": "#000000",
        "x": 180,
        "y": 300,
        "wires": [
            [
                "3d4e5e51.bdf952"
            ]
        ]
    },
    {
        "id": "1a2fc62c1335c250",
        "type": "exec",
        "z": "6ec95de2e0350d99",
        "command": "sudo iwlist wlan0 scan | grep ESSID | sed 's/ESSID://g;s/\"//g;s/^ *//;s/ *$//'",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "scan",
        "x": 430,
        "y": 80,
        "wires": [
            [
                "5b3491dd7fa7e0f9"
            ],
            [],
            []
        ]
    },
    {
        "id": "5b3491dd7fa7e0f9",
        "type": "function",
        "z": "6ec95de2e0350d99",
        "name": "parseOptions",
        "func": "var ssids = msg.payload.split('\\n').filter(s => !!s)\n\nssids = [...new Set(ssids)];\n\nmsg.options = ssids\nmsg.payload = null\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 660,
        "y": 67,
        "wires": [
            [
                "25b6f87af999c359"
            ]
        ]
    },
    {
        "id": "23a8c5aba5ac8cca",
        "type": "inject",
        "z": "6ec95de2e0350d99",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 80,
        "wires": [
            [
                "1a2fc62c1335c250",
                "eb7f6bf25a93a989",
                "c82a99b2d380754c",
                "8a920102ebd9fdad"
            ]
        ]
    },
    {
        "id": "25b6f87af999c359",
        "type": "ui_dropdown",
        "z": "6ec95de2e0350d99",
        "name": "",
        "label": "Wifi",
        "tooltip": "",
        "place": "Select a WIFI",
        "group": "102d980614be1665",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "",
        "topicType": "str",
        "className": "",
        "x": 830,
        "y": 67,
        "wires": [
            [
                "90353477698c2d8f"
            ]
        ]
    },
    {
        "id": "ffb430dabc54847f",
        "type": "ui_button",
        "z": "6ec95de2e0350d99",
        "name": "",
        "group": "102d980614be1665",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Scan",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "true",
        "payloadType": "bool",
        "topic": "",
        "topicType": "str",
        "x": 230,
        "y": 181,
        "wires": [
            [
                "1a2fc62c1335c250"
            ]
        ]
    },
    {
        "id": "1d8e488a02c17767",
        "type": "ui_ui_control",
        "z": "6ec95de2e0350d99",
        "name": "onTab",
        "events": "all",
        "x": 70,
        "y": 40,
        "wires": [
            [
                "2583b1492e7e7673",
                "02404491789156b5"
            ]
        ]
    },
    {
        "id": "2583b1492e7e7673",
        "type": "switch",
        "z": "6ec95de2e0350d99",
        "name": "ifWifi",
        "property": "name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Wifi",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 271,
        "y": 80,
        "wires": [
            [
                "1a2fc62c1335c250",
                "eb7f6bf25a93a989",
                "c82a99b2d380754c"
            ]
        ]
    },
    {
        "id": "eb7f6bf25a93a989",
        "type": "exec",
        "z": "6ec95de2e0350d99",
        "command": "ifconfig wlan0",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "getInfo",
        "x": 430,
        "y": 181,
        "wires": [
            [
                "af8a62f3fa56a1a8"
            ],
            [],
            []
        ]
    },
    {
        "id": "af8a62f3fa56a1a8",
        "type": "function",
        "z": "6ec95de2e0350d99",
        "name": "parseInfo",
        "func": "var ip = msg.payload.match(/inet ([0-9\\.]+)/)[1]\nvar mask = msg.payload.match(/netmask ([0-9\\.]+)/)[1]\nvar broadcast = msg.payload.match(/broadcast ([0-9\\.]+)/)[1]\n\n\nnode.send({topic: 'ip', payload: ip})\nnode.send({topic: 'mask', payload: mask})\nnode.send({topic: 'broadcast', payload: broadcast})",
        "outputs": 1,
        "noerr": 0,
        "x": 640,
        "y": 168,
        "wires": [
            [
                "d74685eae448db96"
            ]
        ]
    },
    {
        "id": "d74685eae448db96",
        "type": "switch",
        "z": "6ec95de2e0350d99",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ip",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "mask",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "broadcast",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 810,
        "y": 181,
        "wires": [
            [
                "680a70c3af127524"
            ],
            [
                "3a9039415f168948"
            ],
            [
                "038e13d093426b97"
            ]
        ]
    },
    {
        "id": "680a70c3af127524",
        "type": "ui_text",
        "z": "6ec95de2e0350d99",
        "group": "cf2db1f0d54fcfea",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "IP",
        "format": "{{msg.payload || '---'}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 990,
        "y": 141,
        "wires": []
    },
    {
        "id": "3a9039415f168948",
        "type": "ui_text",
        "z": "6ec95de2e0350d99",
        "group": "cf2db1f0d54fcfea",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Netmask",
        "format": "{{msg.payload || '---'}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1000,
        "y": 181,
        "wires": []
    },
    {
        "id": "038e13d093426b97",
        "type": "ui_text",
        "z": "6ec95de2e0350d99",
        "group": "cf2db1f0d54fcfea",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Broadcast",
        "format": "{{msg.payload || '---'}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 1000,
        "y": 221,
        "wires": []
    },
    {
        "id": "5dd0c9943ded849d",
        "type": "ui_form",
        "z": "6ec95de2e0350d99",
        "name": "",
        "label": "Update Network",
        "group": "102d980614be1665",
        "order": 3,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "SSID",
                "value": "ssid",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Password",
                "value": "password",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "ssid": "",
            "password": ""
        },
        "payload": "",
        "submit": "UPDATE",
        "cancel": "RESET",
        "topic": "",
        "topicType": "str",
        "splitLayout": false,
        "className": "",
        "x": 1140,
        "y": 67,
        "wires": [
            [
                "69c16d523ae4c7e5"
            ]
        ]
    },
    {
        "id": "90353477698c2d8f",
        "type": "function",
        "z": "6ec95de2e0350d99",
        "name": "",
        "func": "\nmsg.payload = {ssid: msg.payload}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 970,
        "y": 67,
        "wires": [
            [
                "5dd0c9943ded849d"
            ]
        ]
    },
    {
        "id": "69c16d523ae4c7e5",
        "type": "function",
        "z": "6ec95de2e0350d99",
        "name": "getPassphrase",
        "func": "var data = msg.payload\n\nvar command = `wpa_passphrase \"${data.ssid}\" \"${data.password}\" | sed '/#psk=\".*\"/d'`\n \nmsg.payload = command\n\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 67,
        "wires": [
            [
                "fd549633b914e846"
            ]
        ]
    },
    {
        "id": "fd549633b914e846",
        "type": "exec",
        "z": "6ec95de2e0350d99",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 1481,
        "y": 67,
        "wires": [
            [
                "2e5799c77f19ba29"
            ],
            [],
            []
        ]
    },
    {
        "id": "2e5799c77f19ba29",
        "type": "function",
        "z": "6ec95de2e0350d99",
        "name": "updateWpasupplicant",
        "func": "var template = `sudo tee /etc/wpa_supplicant/wpa_supplicant.conf <<EOF\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\ncountry=CA\n\n${msg.payload}\nEOF\\n\n`\n\nmsg.payload = template\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 60,
        "wires": [
            [
                "be40ea66a7b61d1c"
            ]
        ]
    },
    {
        "id": "be40ea66a7b61d1c",
        "type": "exec",
        "z": "6ec95de2e0350d99",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "updateConf",
        "x": 1270,
        "y": 180,
        "wires": [
            [
                "e65a3fe2763b679d",
                "a6db4d4fd53a63c2"
            ],
            [],
            []
        ]
    },
    {
        "id": "f9f341965608e62a",
        "type": "exec",
        "z": "6ec95de2e0350d99",
        "command": "sudo reboot",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Reboot",
        "x": 1640,
        "y": 180,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "e65a3fe2763b679d",
        "type": "function",
        "z": "6ec95de2e0350d99",
        "name": "showMessage",
        "func": "\nmsg.payload = \"Rebooting System, please connect to the selected network\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 280,
        "wires": [
            [
                "88abb19f15fa2886"
            ]
        ]
    },
    {
        "id": "88abb19f15fa2886",
        "type": "ui_toast",
        "z": "6ec95de2e0350d99",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "",
        "x": 1690,
        "y": 280,
        "wires": []
    },
    {
        "id": "c82a99b2d380754c",
        "type": "exec",
        "z": "6ec95de2e0350d99",
        "command": "iwgetid",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "getCurrentSSID",
        "x": 460,
        "y": 260,
        "wires": [
            [
                "edf7d15f712112d1"
            ],
            [],
            []
        ]
    },
    {
        "id": "885d267e76b55959",
        "type": "ui_text",
        "z": "6ec95de2e0350d99",
        "group": "cf2db1f0d54fcfea",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "SSID",
        "format": "{{msg.payload || 'Hotspot Mode'}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 810,
        "y": 260,
        "wires": []
    },
    {
        "id": "edf7d15f712112d1",
        "type": "function",
        "z": "6ec95de2e0350d99",
        "name": "parseInfo",
        "func": "var ssid = msg.payload.match(/ESSID:\"([^\"]+)\"/)[1]\n\n\nnode.send({topic: 'ssid', payload: ssid})\n",
        "outputs": 1,
        "noerr": 0,
        "x": 640,
        "y": 247,
        "wires": [
            [
                "885d267e76b55959"
            ]
        ]
    },
    {
        "id": "a6db4d4fd53a63c2",
        "type": "delay",
        "z": "6ec95de2e0350d99",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1460,
        "y": 180,
        "wires": [
            [
                "f9f341965608e62a"
            ]
        ]
    },
    {
        "id": "77462605cfe50edf",
        "type": "ui_button",
        "z": "6ec95de2e0350d99",
        "name": "",
        "group": "cf2db1f0d54fcfea",
        "order": 10,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Hotspot Mode",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "\"\"",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 1480,
        "y": 20,
        "wires": [
            [
                "2e5799c77f19ba29"
            ]
        ]
    },
    {
        "id": "89170b41ed4faf65",
        "type": "ui_text",
        "z": "6ec95de2e0350d99",
        "group": "cf2db1f0d54fcfea",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Connection Label",
        "label": "",
        "format": "Connected to:",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 450,
        "y": 340,
        "wires": []
    },
    {
        "id": "480691a398c6b573",
        "type": "ui_form",
        "z": "6ec95de2e0350d99",
        "name": "Configure AP",
        "label": "",
        "group": "cf2db1f0d54fcfea",
        "order": 9,
        "width": 0,
        "height": 0,
        "options": [
            {
                "label": "Configure AP SSID",
                "value": "ap_ssid",
                "type": "text",
                "required": true,
                "rows": null
            },
            {
                "label": "Configure AP password",
                "value": "ap_psk",
                "type": "password",
                "required": true,
                "rows": null
            }
        ],
        "formValue": {
            "ap_ssid": "",
            "ap_psk": ""
        },
        "payload": "",
        "submit": "submit",
        "cancel": "reset",
        "topic": "topic",
        "topicType": "msg",
        "splitLayout": "",
        "className": "",
        "x": 90,
        "y": 440,
        "wires": [
            [
                "a3150196496c0df9",
                "73753dc051730f02"
            ]
        ]
    },
    {
        "id": "a3150196496c0df9",
        "type": "function",
        "z": "6ec95de2e0350d99",
        "name": "updateHostAPD",
        "func": "var template = `sudo tee /etc/hostapd/hostapd.conf <<EOF\n\n# update with relevant country\ncountry_code=CA\ninterface=wlan0\n\n## un-comment below line if setting up extended network (options 3)\n# bridge=br0\n\n## comment out below line if setting extended network (options 3)\ndriver=nl80211\n\nssid=${msg.payload.ap_ssid}\nhw_mode=g\nchannel=6\nwmm_enabled=0\nmacaddr_acl=0\nauth_algs=1\nignore_broadcast_ssid=0\nwpa=2\nwpa_passphrase=${msg.payload.ap_psk}\nwpa_key_mgmt=WPA-PSK\nwpa_pairwise=TKIP\nrsn_pairwise=CCMP\n\n\nEOF\\n\n`\n\nmsg.payload = template\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 440,
        "wires": [
            [
                "9cc403e4a387750a"
            ]
        ]
    },
    {
        "id": "9cc403e4a387750a",
        "type": "exec",
        "z": "6ec95de2e0350d99",
        "command": "",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "UpdateConf",
        "x": 490,
        "y": 440,
        "wires": [
            [
                "e5c2c9852b5dd108"
            ],
            [],
            []
        ]
    },
    {
        "id": "e5c2c9852b5dd108",
        "type": "exec",
        "z": "6ec95de2e0350d99",
        "command": "sudo systemctl restart hostapd",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "reconfigure",
        "x": 690,
        "y": 420,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "73753dc051730f02",
        "type": "change",
        "z": "6ec95de2e0350d99",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Attempting to reconfigure network access point, please wait a few seconds and refresh page",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 560,
        "wires": [
            [
                "2ca61548bc28022b"
            ]
        ]
    },
    {
        "id": "2ca61548bc28022b",
        "type": "ui_toast",
        "z": "6ec95de2e0350d99",
        "position": "dialog",
        "displayTime": "5",
        "highlight": "",
        "sendall": true,
        "outputs": 1,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 530,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "72339622e8b22c8c",
        "type": "ui_text",
        "z": "6ec95de2e0350d99",
        "group": "cf2db1f0d54fcfea",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "SSID AP",
        "label": "Hotspot SSID",
        "format": "{{msg.payload || '---'}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 560,
        "y": 680,
        "wires": []
    },
    {
        "id": "8a920102ebd9fdad",
        "type": "exec",
        "z": "6ec95de2e0350d99",
        "command": "sudo cat /etc/hostapd/hostapd.conf | grep '^ssid=' | sed 's/ssid=//g' | xargs",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "getCurrentSSID AP",
        "x": 270,
        "y": 700,
        "wires": [
            [
                "72339622e8b22c8c"
            ],
            [],
            []
        ]
    },
    {
        "id": "02404491789156b5",
        "type": "exec",
        "z": "6ec95de2e0350d99",
        "command": "sudo cat /etc/hostapd/hostapd.conf |grep wpa_passphrase= | sed 's/wpa_passphrase=//g' | xargs",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "getPSK AP",
        "x": 250,
        "y": 800,
        "wires": [
            [
                "6f55a5577591a923"
            ],
            [],
            []
        ]
    },
    {
        "id": "6f55a5577591a923",
        "type": "ui_text",
        "z": "6ec95de2e0350d99",
        "group": "cf2db1f0d54fcfea",
        "order": 8,
        "width": 0,
        "height": 0,
        "name": "PSK AP",
        "label": "PSK",
        "format": "{{msg.payload || '---'}}",
        "layout": "row-spread",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 500,
        "y": 780,
        "wires": []
    },
    {
        "id": "a5a6313ad687df1b",
        "type": "ui_text",
        "z": "6ec95de2e0350d99",
        "group": "cf2db1f0d54fcfea",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "Hotspot Settings:",
        "label": "",
        "format": "Hotspot Settings:",
        "layout": "col-center",
        "className": "",
        "style": false,
        "font": "",
        "fontSize": "",
        "color": "#000000",
        "x": 950,
        "y": 580,
        "wires": []
    }
]